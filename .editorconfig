# This is the editorconfig file containing editor configurations

# Indicates this is the main editorconfig
root = true

# General rules
[*]
# Charset
charset = utf-8
# Whether to add newline at end of file
insert_final_newline = false
# Whether to trim trailing whitespaces from file
trim_trailing_whitespace = true
# Style of indentation
indent_style = space
# Type of newline
end_of_line = lf
# Default indent size
indent_size = 2

# Settings for c# source files
[*.cs]
# Modify indent size to 4 spaces
indent_size = 4

# Dotnet and CSharp code analysis and formatting settings are below.

# Naming conventions for code elements

# Local function names must be pascal cased.
dotnet_naming_rule.local_function_names_must_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_function_names_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.local_function_names_must_be_pascal_case.symbols = local_functions
dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *

# Local variable and parameter names must be camel cased.
dotnet_naming_rule.local_variable_and_parameter_names_must_be_camel_case.severity = suggestion
dotnet_naming_rule.local_variable_and_parameter_names_must_be_camel_case.style = camel_case
dotnet_naming_rule.local_variable_and_parameter_names_must_be_camel_case.symbols = locals_and_parameters
dotnet_naming_symbols.locals_and_parameters.applicable_kinds = local, parameter
dotnet_naming_symbols.locals_and_parameters.applicable_accessibilities = *

# Names of private fields must be camel cased.
dotnet_naming_rule.private_field_names_must_be_camel_case.severity = suggestion
dotnet_naming_rule.private_field_names_must_be_camel_case.style = camel_case
dotnet_naming_rule.private_field_names_must_be_camel_case.symbols = private_fields
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

# Non private fields must be pascal cased.
dotnet_naming_rule.non_private_field_names_must_be_pascal_case.severity = warning
dotnet_naming_rule.non_private_field_names_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.non_private_field_names_must_be_pascal_case.symbols = non_private_fields
dotnet_naming_symbols.non_private_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_fields.applicable_accessibilities = public, protected, private_protected, protected_internal, internal

# Constant names (including local variables) must be pascal case.
dotnet_naming_rule.constant_names_must_be_pascal_case.severity = warning
dotnet_naming_rule.constant_names_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.constant_names_must_be_pascal_case.symbols = constants
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.applicable_accessibilities = *
dotnet_naming_symbols.constants.required_modifiers = const

# Names of non fields must be pascal cased.
dotnet_naming_rule.member_names_except_fields_must_be_pascal_case.severity = warning
dotnet_naming_rule.member_names_except_fields_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.member_names_except_fields_must_be_pascal_case.symbols = members_except_fields
dotnet_naming_symbols.members_except_fields.applicable_kinds = method, property, event
dotnet_naming_symbols.members_except_fields.applicable_accessibilities = *

# Type parameter names must be pascal case.
dotnet_naming_rule.type_parameter_names_must_be_pascal_case.severity = suggestion
dotnet_naming_rule.type_parameter_names_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.type_parameter_names_must_be_pascal_case.symbols = type_parameters
dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *

# Interface names must be pascal cased and their names have an "I" prefix.
dotnet_naming_rule.interface_names_must_be_pascal_cased_and_prefixed_with_I.severity = warning
dotnet_naming_rule.interface_names_must_be_pascal_cased_and_prefixed_with_I.style = pascal_case_with_I_prefix
dotnet_naming_rule.interface_names_must_be_pascal_cased_and_prefixed_with_I.symbols = interfaces
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *

# All type names except interfaces must be pascal cased.
dotnet_naming_rule.type_names_must_be_pascal_case.severity = warning
dotnet_naming_rule.type_names_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.type_names_must_be_pascal_case.symbols = types_except_interfaces
dotnet_naming_symbols.types_except_interfaces.applicable_kinds = struct, enum, delegate, class
dotnet_naming_symbols.types_except_interfaces.applicable_accessibilities = *

# Namespace names must be pascal cased.
dotnet_naming_rule.namespace_names_must_be_pascal_case.severity = warning
dotnet_naming_rule.namespace_names_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.namespace_names_must_be_pascal_case.symbols = namespaces
dotnet_naming_symbols.namespaces.applicable_kinds = namespace
dotnet_naming_symbols.namespaces.applicable_accessibilities = *

# Define naming styles
dotnet_naming_style.pascal_case.capitalization = pascal_case
dotnet_naming_style.camel_case.capitalization = camel_case
dotnet_naming_style.pascal_case_with_I_prefix.capitalization = pascal_case
dotnet_naming_style.pascal_case_with_I_prefix.required_prefix = I

# Code style settings for dotnet/csharp

# Settings for this qualifier
dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = true:suggestion
dotnet_style_qualification_for_method = true:suggestion
dotnet_style_qualification_for_event = true:suggestion

# Settings for usage of builtin type names instead of library names
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:silent
dotnet_style_readonly_field = true:suggestion

# Parenthesis preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Expression preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:warning

# Options for var usage
csharp_style_var_for_built_in_types = true:silent
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:silent

# Where to use expression bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:silent

# Settings for pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning

# Whether out variables should be declared inline
csharp_style_inlined_variable_declaration = true:warning

# Whether braces are preferred when not needed
csharp_prefer_braces = true:suggestion

# Preferences for unused value handling
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion

# Preferences for index and range operators
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion

# Miscellaneous
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = false:silent
csharp_using_directive_placement = outside_namespace:warning
csharp_prefer_static_local_function = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_prefer_switch_expression = true:silent

# Code quality settings

# Settings for unused parameters
dotnet_code_quality_unused_parameters = non_public:suggestion

# Dotnet and c# code formatting settings

# Whether to place using directives for System.* before others, sorted accordingly
dotnet_sort_system_directives_first = true

# Whether to place a blank line between groups of usings
dotnet_separate_import_directive_groups = true

# New line options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

# Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = false